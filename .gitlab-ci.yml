# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/development/cicd/templates/
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml


# stages:
#   - build
#   - deploy

# variables:
#   AR_IMAGE: asia-south2-docker.pkg.dev/multi-ai-agent-system-463413/disastermanagement-repo/main:$CI_COMMIT_SHORT_SHA

# build:
#   image: docker:20.10
#   stage: build
#   services:
#     - docker:20.10-dind
#   before_script:
#     - echo "$GCLOUD_SERVICE_KEY" | base64 -d > ${HOME}/gcloud-key.json
#     - gcloud auth activate-service-account --key-file=${HOME}/gcloud-key.json
#     - gcloud auth configure-docker asia-south2-docker.pkg.dev --quiet
#   script:
#     - docker build -t "$AR_IMAGE" .
#     - docker push "$AR_IMAGE"
#   artifacts:
#     expire_in: 1 hour
#   only:
#     - main


# deploy:
#   image: gcr.io/google.com/cloudsdktool/cloud-sdk:slim
#   stage: deploy
#   script:
#     - gcloud run deploy disastermanagementcloudrun \
#         --image="$AR_IMAGE" \
#         --platform=managed \
#         --region=asia-south2 \
#         --allow-unauthenticated \
#         --project=multi-ai-agent-system-463413
#   only:
#     - main

stages:
  - build
  - upload
  - deploy

variables:
  GITLAB_IMAGE: $CI_REGISTRY_IMAGE/main:$CI_COMMIT_SHORT_SHA
  AR_IMAGE: asia-docker.pkg.dev/multi-ai-agent-system-463413/disastermanagement-repo/main:$CI_COMMIT_SHORT_SHA

build:
  stage: build
  # tags: [saas-linux-2xlarge-amd64]
  image: docker:20.10
  services:
    - docker:20.10-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
  script:
    - docker build -t "$GITLAB_IMAGE" .
    - docker push "$GITLAB_IMAGE"

include:
  - component: gitlab.com/google-gitlab-components/artifact-registry/upload-artifact-registry@main
    inputs:
      stage: upload
      source: $GITLAB_IMAGE
      target: $AR_IMAGE
  - component: gitlab.com/google-gitlab-components/cloud-run/deploy-cloud-run@main
    inputs:
      stage: deploy
      project_id: "multi-ai-agent-system-463413"
      service: "disastermanagementcloudrun"
      region: "us-east1"
      image: $AR_IMAGE